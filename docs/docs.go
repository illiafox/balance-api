// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2022-06-21 16:32:12.481723526 +0300 EEST m=+2.255577655
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://swagger.io/terms/",
        "contact": {
            "name": "Developer",
            "url": "https://github.com/illiafox",
            "email": "illiadimura@gmail.com"
        },
        "license": {
            "name": "Boost Software License 1.0",
            "url": "https://opensource.org/licenses/BSL-1.0"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/change": {
            "post": {
                "description": "Change balance by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Change user balance",
                "parameters": [
                    {
                        "description": "User id, change amount and description",
                        "name": "input",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/dto.ChangeBalanceIN"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ChangeBalanceOUT"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            }
        },
        "/get": {
            "get": {
                "description": "Get balance by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Get user balance",
                "parameters": [
                    {
                        "description": "User id and Currency",
                        "name": "input",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/dto.GetBalanceIN"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Balance data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.GetBalanceOUT"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "balance": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            }
        },
        "/transfer": {
            "put": {
                "description": "Transfer money from one balance to another",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Transfer money between users",
                "parameters": [
                    {
                        "description": "to, from, amount and description",
                        "name": "input",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/dto.TransferBalanceIN"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TransferBalanceOUT"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            }
        },
        "/view": {
            "get": {
                "description": "View transactions with sorting and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "View user transactions",
                "parameters": [
                    {
                        "description": "User id, limit, sorting and pagination",
                        "name": "input",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/dto.ViewTransactionsIN"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ViewTransactionsOUT"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ChangeBalanceIN": {
            "type": "object",
            "properties": {
                "change": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.ChangeBalanceOUT": {
            "type": "object",
            "properties": {
                "ok": {
                    "type": "boolean"
                }
            }
        },
        "dto.Error": {
            "type": "object",
            "properties": {
                "err": {
                    "type": "string"
                },
                "ok": {
                    "type": "boolean"
                }
            }
        },
        "dto.GetBalanceIN": {
            "type": "object",
            "properties": {
                "base": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.GetBalanceOUT": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "base": {
                    "type": "string"
                },
                "ok": {
                    "type": "boolean"
                }
            }
        },
        "dto.TransferBalanceIN": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "from_id": {
                    "type": "integer"
                },
                "to_id": {
                    "type": "integer"
                }
            }
        },
        "dto.TransferBalanceOUT": {
            "type": "object",
            "properties": {
                "ok": {
                    "type": "boolean"
                }
            }
        },
        "dto.ViewTransactionsIN": {
            "type": "object",
            "required": [
                "sort"
            ],
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "sort": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.ViewTransactionsOUT": {
            "type": "object",
            "properties": {
                "ok": {
                    "type": "boolean"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Transaction"
                    }
                }
            }
        },
        "entity.Transaction": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "from_id": {
                    "description": "number or \"null\"",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "to_id": {
                    "type": "integer"
                },
                "transaction_id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "0.0.0.0:8080/",
	BasePath:         "api/v1",
	Schemes:          []string{},
	Title:            "Balance API",
	Description:      "Balance API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
